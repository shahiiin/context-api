{"ast":null,"code":"import { DELETE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS, FETCH_POSTS_FAILURE, FETCH_POSTS_REQUEST, FETCH_POSTS_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, EDIT_POST_REQUEST, EDIT_POST_SUCCESS, EDIT_POST_FAILURE } from \"./postsTypes\";\nconst initialState = {\n  loading: false,\n  error: \"\",\n  posts: null\n};\nexport const postsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FETCH_POSTS_REQUEST:\n      {\n        return { ...state,\n          loading: true\n        };\n      }\n\n    case FETCH_POSTS_SUCCESS:\n      {\n        return {\n          loading: false,\n          error: \"\",\n          posts: action.payload\n        };\n      }\n\n    case FETCH_POSTS_FAILURE:\n      {\n        return {\n          loading: false,\n          error: action.payload,\n          posts: null\n        };\n      }\n\n    case DELETE_POST_REQUEST:\n      {\n        return { ...state,\n          loading: true\n        };\n      }\n\n    case DELETE_POST_SUCCESS:\n      {\n        return {\n          loading: false,\n          error: \"\",\n          posts: state.posts ? state.posts.filter(post => post.id !== action.payload) : null\n        };\n      }\n\n    case DELETE_POST_FAILURE:\n      {\n        return { ...state,\n          loading: false,\n          error: action.payload\n        };\n      }\n\n    case ADD_POST_REQUEST:\n      {\n        return { ...state,\n          loading: true\n        };\n      }\n\n    case ADD_POST_SUCCESS:\n      {\n        return {\n          loading: false,\n          error: \"\",\n          posts: [...(state.posts, []), action.payload]\n        };\n      }\n\n    case ADD_POST_FAILURE:\n      {\n        return { ...state,\n          loading: false,\n          error: action.payload\n        };\n      }\n\n    case EDIT_POST_REQUEST:\n      {\n        return { ...state,\n          loading: true\n        };\n      }\n\n    case EDIT_POST_SUCCESS:\n      {\n        let updatedPosts = [...(state.posts, [])];\n        let index = updatedPosts.findIndex(post => post.id === action.payload.id);\n        let selectedPost = { ...updatedPosts[index]\n        };\n        selectedPost = action.payload;\n        updatedPosts[index] = selectedPost;\n        return { ...state,\n          loading: false,\n          error: \"\"\n        };\n      }\n\n    case EDIT_POST_FAILURE:\n      {\n        return { ...state,\n          loading: false,\n          error: action.payload\n        };\n      }\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["DELETE_POST_FAILURE","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","FETCH_POSTS_FAILURE","FETCH_POSTS_REQUEST","FETCH_POSTS_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","EDIT_POST_REQUEST","EDIT_POST_SUCCESS","EDIT_POST_FAILURE","initialState","loading","error","posts","postsReducer","state","action","type","payload","filter","post","id","updatedPosts","index","findIndex","selectedPost"],"sources":["/home/shahin/Desktop/project/testTask/src/Redux/modules/posts/postsReducer.js"],"sourcesContent":["import {\n  DELETE_POST_FAILURE,\n  DELETE_POST_REQUEST,\n  DELETE_POST_SUCCESS,\n  FETCH_POSTS_FAILURE,\n  FETCH_POSTS_REQUEST,\n  FETCH_POSTS_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  EDIT_POST_REQUEST,\n  EDIT_POST_SUCCESS,\n  EDIT_POST_FAILURE,\n} from \"./postsTypes\";\n\nconst initialState = {\n  loading: false,\n  error: \"\",\n  posts: null,\n};\n\nexport const postsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_POSTS_REQUEST: {\n      return {\n        ...state,\n        loading: true,\n      };\n    }\n    case FETCH_POSTS_SUCCESS: {\n      return {\n        loading: false,\n        error: \"\",\n        posts: action.payload,\n      };\n    }\n    case FETCH_POSTS_FAILURE: {\n      return {\n        loading: false,\n        error: action.payload,\n        posts: null,\n      };\n    }\n    case DELETE_POST_REQUEST: {\n      return {\n        ...state,\n        loading: true,\n      };\n    }\n    case DELETE_POST_SUCCESS: {\n      return {\n        loading: false,\n        error: \"\",\n        posts: state.posts\n          ? state.posts.filter((post) => post.id !== action.payload)\n          : null,\n      };\n    }\n    case DELETE_POST_FAILURE: {\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n    }\n    case ADD_POST_REQUEST: {\n      return {\n        ...state,\n        loading: true,\n      };\n    }\n    case ADD_POST_SUCCESS: {\n      return {\n        loading: false,\n        error: \"\",\n        posts: [...(state.posts, []), action.payload],\n      };\n    }\n    case ADD_POST_FAILURE: {\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n    }\n    case EDIT_POST_REQUEST: {\n      return {\n        ...state,\n        loading: true,\n      };\n    }\n    case EDIT_POST_SUCCESS: {\n      let updatedPosts = [...(state.posts, [])];\n      let index = updatedPosts.findIndex(\n        (post) => post.id === action.payload.id\n      );\n      let selectedPost = { ...updatedPosts[index] };\n      selectedPost = action.payload;\n      updatedPosts[index] = selectedPost;\n\n      return {\n        ...state,\n        loading: false,\n        error: \"\",\n      };\n    }\n\n    case EDIT_POST_FAILURE: {\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}